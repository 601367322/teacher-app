package com.prance.lib.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "keypad_table".
*/
public class KeyPadEntityDao extends AbstractDao<KeyPadEntity, Long> {

    public static final String TABLENAME = "keypad_table";

    /**
     * Properties of entity KeyPadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property BaseStationSN = new Property(1, String.class, "baseStationSN", false, "BASE_STATION_SN");
        public final static Property KeyId = new Property(2, String.class, "keyId", false, "KEY_ID");
    }


    public KeyPadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public KeyPadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"keypad_table\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"BASE_STATION_SN\" TEXT NOT NULL ," + // 1: baseStationSN
                "\"KEY_ID\" TEXT);"); // 2: keyId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"keypad_table\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KeyPadEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getBaseStationSN());
 
        String keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindString(3, keyId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KeyPadEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getBaseStationSN());
 
        String keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindString(3, keyId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public KeyPadEntity readEntity(Cursor cursor, int offset) {
        KeyPadEntity entity = new KeyPadEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // baseStationSN
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // keyId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KeyPadEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBaseStationSN(cursor.getString(offset + 1));
        entity.setKeyId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KeyPadEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KeyPadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KeyPadEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
