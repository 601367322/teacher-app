apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'


def Test_Setting_close = 'close'
def Test_Setting_open = 'open'

//读取签名配置文件
Properties props = new Properties()
props.load(new FileInputStream(file("../buildsystem/signing.properties")))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.prance.teacher"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        //只有中文
        resConfigs "zh"
        ndk {
            abiFilters "armeabi-v7a"
        }
        // 测试开关
        manifestPlaceholders.put("TEST_SETTING", "$Test_Setting_close")
        //Bugly
        manifestPlaceholders.put("BUGLY_APPID", "c3f5c89f7c")
    }

    signingConfigs {

        release {
            keyAlias props['KEY_ALIAS']
            keyPassword props['KEY_PASSWORD']
            storeFile file(props['KEYSTORE_FILE'])
            storePassword props['KEYSTORE_PASSWORD']

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }


    buildTypes {

        debug {
            minifyEnabled false



            signingConfig signingConfigs.release
            zipAlignEnabled true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'


            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions("normal")

    //渠道列表
    productFlavors {

        dev {
            manifestPlaceholders.put("TEST_SETTING", "$Test_Setting_open")
            manifestPlaceholders.put("APP_CHANNEL", "dev")
            dimension "normal"
        }

        prod {
            dimension "normal"
            manifestPlaceholders.put("APP_CHANNEL", "prod")
        }
    }

    applicationVariants.all { variant ->

        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "app-release.apk"
                outputFileName = new File(fileName)
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    def dependencies = rootProject.ext.dependencies

    kapt dependencies.permissionsdispatcherProcessor

    implementation dependencies.constraintLayout
    implementation dependencies.kotlin
    implementation dependencies.kotlinCoroutines
    implementation dependencies.kotlinCoroutinesAndroid
    implementation dependencies.v4
    implementation dependencies.recyclerview
    implementation dependencies.openGlCanvas
    implementation dependencies.okhttp3
    implementation dependencies.rxjava
    implementation dependencies.rxandroid
    implementation dependencies.gson
    implementation dependencies.utilcode
    implementation dependencies.eventbus
    implementation dependencies.pageindicatorview
    implementation dependencies.glideTransformations
    implementation dependencies.danmu
    implementation (dependencies.retrofit2) {
        exclude group: 'com.squareup.okhttp3'
    }
    implementation(dependencies.permissionsdispatcher) {
        exclude group: 'com.android.support'
    }
    implementation(dependencies.glide) {
        exclude group: "com.android.support"
    }

    implementation project(":lib.base")
    implementation project(":lib.teacher.base")
    implementation project(":lib.test.setting")
    implementation project(":lib.interfaces")
    implementation project(":lib.sunvote")
    implementation project(":lib.bugly")
    implementation project(":lib.common")
    implementation project(":lib.database")
    implementation project(":lib.qrcode")
    implementation project(":lib.socket")
    implementation project(":lib.download")
    implementation project(":lib.sharedpreferences")
    implementation project(":lib.dimens")
}
repositories {
    mavenCentral()
}
